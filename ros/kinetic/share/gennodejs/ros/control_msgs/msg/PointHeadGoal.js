// Auto-generated. Do not edit!

// (in-package control_msgs.msg)


"use strict";

let _serializer = require('../base_serialize.js');
let _deserializer = require('../base_deserialize.js');
let _finder = require('../find.js');
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class PointHeadGoal {
  constructor() {
    this.target = new geometry_msgs.msg.PointStamped();
    this.pointing_axis = new geometry_msgs.msg.Vector3();
    this.pointing_frame = '';
    this.min_duration = {secs: 0, nsecs: 0};
    this.max_velocity = 0.0;
  }

  static serialize(obj, bufferInfo) {
    // Serializes a message object of type PointHeadGoal
    // Serialize message field [target]
    bufferInfo = geometry_msgs.msg.PointStamped.serialize(obj.target, bufferInfo);
    // Serialize message field [pointing_axis]
    bufferInfo = geometry_msgs.msg.Vector3.serialize(obj.pointing_axis, bufferInfo);
    // Serialize message field [pointing_frame]
    bufferInfo = _serializer.string(obj.pointing_frame, bufferInfo);
    // Serialize message field [min_duration]
    bufferInfo = _serializer.duration(obj.min_duration, bufferInfo);
    // Serialize message field [max_velocity]
    bufferInfo = _serializer.float64(obj.max_velocity, bufferInfo);
    return bufferInfo;
  }

  static deserialize(buffer) {
    //deserializes a message object of type PointHeadGoal
    let tmp;
    let len;
    let data = new PointHeadGoal();
    // Deserialize message field [target]
    tmp = geometry_msgs.msg.PointStamped.deserialize(buffer);
    data.target = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [pointing_axis]
    tmp = geometry_msgs.msg.Vector3.deserialize(buffer);
    data.pointing_axis = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [pointing_frame]
    tmp = _deserializer.string(buffer);
    data.pointing_frame = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [min_duration]
    tmp = _deserializer.duration(buffer);
    data.min_duration = tmp.data;
    buffer = tmp.buffer;
    // Deserialize message field [max_velocity]
    tmp = _deserializer.float64(buffer);
    data.max_velocity = tmp.data;
    buffer = tmp.buffer;
    return {
      data: data,
      buffer: buffer
    }
  }

  static datatype() {
    // Returns string type for a message object
    return 'control_msgs/PointHeadGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '8b92b1cd5e06c8a94c917dc3209a4c1d';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    geometry_msgs/PointStamped target
    geometry_msgs/Vector3 pointing_axis
    string pointing_frame
    duration min_duration
    float64 max_velocity
    
    ================================================================================
    MSG: geometry_msgs/PointStamped
    # This represents a Point with reference coordinate frame and timestamp
    Header header
    Point point
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    # 0: no frame
    # 1: global frame
    string frame_id
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Vector3
    # This represents a vector in free space. 
    # It is only meant to represent a direction. Therefore, it does not
    # make sense to apply a translation to it (e.g., when applying a 
    # generic rigid transformation to a Vector3, tf2 will only apply the
    # rotation). If you want your data to be translatable too, use the
    # geometry_msgs/Point message instead.
    
    float64 x
    float64 y
    float64 z
    `;
  }

};

module.exports = PointHeadGoal;
